import './App.css';
import ChatBot from "react-chatbotify";

const queryEndpoint = 'https://access-qa.ccs.uky.edu:6060/api/query';
const apiKey = process.env.REACT_APP_API_KEY;
let hasError = false;

const handleQuery = async (params) => {
  // POST question to the QA API
  try {
    const requestOptions = {
      method: 'POST',
      headers: { 
        'Content-Type': 'application/json',
        'X-API-KEY': apiKey

      },
      body: JSON.stringify({ query: params.userInput })
    };
    const response = await fetch(queryEndpoint, requestOptions)
    let text = "";
    let offset = 0;
    for await (const chunk of response.stream) {
      const chunkText = chunk.text();
      text += chunkText;
      // inner for-loop used to visually stream messages character-by-character
      // feel free to remove this loop if you are alright with visually chunky streams
      for (let i = offset; i < chunkText.length; i++) {
        // while this example shows params.streamMessage taking in text input,
        // you may also feed it custom JSX.Element if you wish
        await params.streamMessage(text.slice(0, i + 1));
        await new Promise(resolve => setTimeout(resolve, 30));
      }
      offset += chunkText.length;
    }

    // in case any remaining chunks are missed (e.g. timeout)
    // you may do your own nicer logic handling for large chunks
    for (let i = offset; i < text.length; i++) {
      await params.streamMessage(text.slice(0, i + 1));
      await new Promise(resolve => setTimeout(resolve, 30));
    }
    await params.streamMessage(text);
  } catch (error) {
    await params.injectMessage("Unable to contact the Q&A Bot. Please try again later.");
    hasError = true;
  }
}

const MyChatBot = () => {
  const flow = {
    start: {
      message: 'Hello! How can I help you today?',
      path: 'loop'
    },
    loop: {
      message: async (params) => {
        await handleQuery(params);
      },
      path: () => {
        if (hasError) {
          return 'start'
        }
        return 'loop'
      }
    }
  
  }
  return (
    <ChatBot 
      options={{
        theme: { 
          primaryColor: '#1a5b6e',
          secondaryColor: '#107180',
          fontFamily: 'Arial, sans-serif',
          embedded: false 
        },
        header: {
          title: 'ACCESS Q&A Bot',
          avatar: 'https://support.access-ci.org/themes/contrib/asp-theme/images/icons/ACCESS-arrrow.svg',
        },
        chatInput: {
          enabledPlaceholderText: 'Ask me anything about ACCESS!',
        },
        chatHistory: { storageKey: "qa_bot" },
        botBubble: { simStream: true },
        isOpen: false,
        chatButton: {
          icon: 'https://support.access-ci.org/themes/contrib/asp-theme/images/icons/ACCESS-arrrow.svg',
        },
        tooltip: {
          text: 'Ask me about ACCESS! ðŸ˜Š',
        },
        audio: {
          disabled: true,
        },
        emoji: {
          disabled: true,
        },
        fileAttachment: {
          disabled: true,
        },
        notification: {
          disabled: true,
        },
        footer: {
          text: 'Answers generated by ChatGPT may not be accurate. Please consult the official documentation or contact the ACCESS team for more information.',
        },
      }}
      flow={flow}
    />
  );
}
function App() {
  return (
    <div className="access-qa-bot">
      <MyChatBot />
    </div>
  );
}

export default App;
